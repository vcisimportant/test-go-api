pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  securityContext:
    fsGroup: 1000
  hostAliases:
  - ip: "10.103.81.49"
    hostnames:
    - "registry.local"
  initContainers:
    - name: busybox-share-init
      image: busybox:musl
      command:
        - sh
      args:
        - -c
        - "cp -a /bin/* /busybox"
      volumeMounts:
        - name: busybox
          mountPath: /busybox
  containers:
    - name: kaniko
      image: gcr.io/kaniko-project/executor
      command:
        - sleep
      args:
        - infinity
      env:
        - name: PATH
          value: /usr/local/bin:/kaniko:/busybox
      workingDir: /home/jenkins/agent
      volumeMounts:
        - name: busybox
          mountPath: /busybox
          readOnly: true
        - name: jenkins-docker-cfg
          mountPath: /kaniko/.docker
    - name: kubectl
      image: bitnami/kubectl:latest
      command:
        - sleep
      args: 
        - infinity
      tty: true
      securityContext:
        runAsUser: 1000  # This is usually the Jenkins user ID
        runAsGroup: 1000
  volumes:
    - name: busybox
      emptyDir: {}
    - name: jenkins-docker-cfg
      secret:
        secretName: my-docker-registry
        items:
        - key: .dockerconfigjson
          path: config.json
"""
        }
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/vcisimportant/test-go-api.git'
            }
        }
        
        stage('Build with Kaniko') {
            steps {
                container('kaniko') {
                    sh '''
                    /kaniko/executor --context `pwd` \
                                     --dockerfile `pwd`/Dockerfile \
                                     --destination registry.local:5000/go-api:${BUILD_NUMBER} \
                                     --skip-tls-verify
                    '''
                }
            }
        }
          stage('Apply Kubernetes files') {
            steps {
                container('kubectl') {
                    sh 'echo teeeeeeeeeest'
                    sh 'which kubectl || echo "kubectl not found"'
                    sh 'ls -la /usr/bin/kubectl || echo "No kubectl in /usr/bin"'
                    sh 'ls -la /usr/local/bin/kubectl || echo "No kubectl in /usr/local/bin"'
                    
                    // Try with full path if available
                    sh 'kubectl version --client || echo "kubectl client version failed"'
                    withKubeConfig([credentialsId: 'try3', serverUrl: 'https://kubernetes.default.svc']) {
                        sh 'kubectl get pods || echo "kubectl get pods failed"'
                    }
                }
            }    
        }
    }
 }
